<?xml version="1.0" encoding="UTF-8" ?>
<!--
  ~ Copyright (c) 18-12-2 下午11:38 toxic
  -->

<!DOCTYPE mapper PUBLIC "-//ibatis.apache.org//DTD Mapper 3.0//EN"
		"http://mybatis.org/dtd/mybatis-3-mapper.dtd">


<!-- 不使用namespace的话sql搜索定位会比较方便 -->
<mapper namespace="com.toxic.auth.mapper.UserInfoMapper">
	<resultMap id="userInfoResultMap" type="com.toxic.auth.model.UserInfo">
        <result property="id" column="id"/>
        <result property="userId" column="user_id"/>
        <result property="userName" column="user_name"/>
        <result property="password" column="password"/>
        <result property="sex" column="sex"/>
        <result property="age" column="age"/>
        <result property="createDateTime" column="create_date_time"/>
        <result property="createUser" column="create_user"/>
        <result property="modifyDateTime" column="modify_date_time"/>
        <result property="modifyUser" column="modify_user"/>
        <result property="deleteFlag" column="delete_flag"/>
	</resultMap>
	
	<!-- 用于select查询公用抽取的列 -->
	<sql id="UserInfoColumns">
	    <![CDATA[
		id,user_id,user_name,password,sex,age,create_date_time,create_user,modify_date_time,modify_user,delete_flag
	    ]]>
	</sql>

	<!-- useGeneratedKeys="true" keyProperty="xxx" for sqlserver and mysql -->
	<insert id="insert" useGeneratedKeys="true" keyProperty="id">
    <![CDATA[
        INSERT INTO t_user_info (
        	id ,
        	user_id ,
        	user_name ,
        	password ,
        	sex ,
        	age ,
        	create_date_time ,
        	create_user ,
        	modify_date_time ,
        	modify_user ,
        	delete_flag 
        ) VALUES (
        	#{id,jdbcType=BIGINT},
        	#{userId,jdbcType=VARCHAR},
        	#{userName,jdbcType=VARCHAR},
        	#{password,jdbcType=VARCHAR},
        	#{sex,jdbcType=TINYINT},
        	#{age,jdbcType=INTEGER},
        	
        	now(),
        	#{createUser,jdbcType=VARCHAR},
        	
        	now(),
        	#{modifyUser,jdbcType=VARCHAR},
        	'1'
        )
    ]]>
		<!--
			oracle: order="BEFORE" SELECT sequenceName.nextval AS ID FROM DUAL 
			DB2: order="BEFORE"" values nextval for sequenceName
		<selectKey resultType="java.lang.Long" order="BEFORE" keyProperty="userId">
			SELECT sequenceName.nextval AS ID FROM DUAL 
        </selectKey>
		-->
	</insert>
    
	<update id="update" >
        UPDATE t_user_info SET
	        <if test="userId!=null">
	        user_id = #{userId,jdbcType=VARCHAR} ,
	        </if>
	        <if test="userName!=null">
	        user_name = #{userName,jdbcType=VARCHAR} ,
	        </if>
	        <if test="password!=null">
	        password = #{password,jdbcType=VARCHAR} ,
	        </if>
	        <if test="sex!=null">
	        sex = #{sex,jdbcType=TINYINT} ,
	        </if>
	        <if test="age!=null">
	        age = #{age,jdbcType=INTEGER} ,
	        </if>
	        <if test="createUser!=null">
	        create_user = #{createUser,jdbcType=VARCHAR} ,
	        </if>
	         modify_date_time = now(),
	        <if test="modifyUser!=null">
	        modify_user = #{modifyUser,jdbcType=VARCHAR} ,
	        </if>
	        delete_flag = '1' 
        WHERE 
	        user_id = #{userId}
	</update>

    <delete id="delete">
    <![CDATA[
        DELETE FROM t_user_info WHERE
        id = #{id} 
    ]]>
    </delete>
    
    <select id="getById" resultMap="userInfoResultMap">
		SELECT <include refid="UserInfoColumns" />
	    <![CDATA[
		    FROM t_user_info 
	        WHERE 
		        id = #{id} 
	    ]]>
	</select>
	
	<sql id="listUserInfoWhere">
		<!-- ognl访问静态方法的表达式 为@class@method(args),以下为调用rapid中的Ognl.isNotEmpty()方法,还有其它方法如isNotBlank()可以使用，具体请查看Ognl类 -->
		<where>      				
	       	<!--<if test="keyWord!=null and keyWord!=''">-->
				<!--AND (id like CONCAT(CONCAT('%', #{keyWord}),'%') or id like CONCAT(CONCAT('%', #{keyWord}),'%'))-->
			<!--</if>-->
	       	<if test="id!=null and id!=''">
				AND id = #{id}
			</if>
	       	<if test="userId!=null and userId!=''">
				AND user_id = #{userId}
			</if>
	       	<if test="userName!=null and userName!=''">
				AND user_name = #{userName}
			</if>
	       	<if test="password!=null and password!=''">
				AND password = #{password}
			</if>
	       	<if test="sex!=null and sex!=''">
				AND sex = #{sex}
			</if>
	       	<if test="age!=null and age!=''">
				AND age = #{age}
			</if>
	       	<if test="createDateTime!=null and createDateTime!=''">
				AND create_date_time = #{createDateTime}
			</if>
	       	<if test="createUser!=null and createUser!=''">
				AND create_user = #{createUser}
			</if>
	       	<if test="modifyDateTime!=null and modifyDateTime!=''">
				AND modify_date_time = #{modifyDateTime}
			</if>
	       	<if test="modifyUser!=null and modifyUser!=''">
				AND modify_user = #{modifyUser}
			</if>
	       	<if test="deleteFlag!=null and deleteFlag!=''">
				AND delete_flag = #{deleteFlag}
			</if>
		</where>
	</sql>
		
    <select id="getCountUserInfo" resultType="int">
        SELECT count(*) FROM t_user_info 
		<include refid="listUserInfoWhere"/>
    </select>
    
    <!--
    	分页查询已经使用Dialect进行分页,也可以不使用Dialect直接编写分页
    	因为分页查询将传 offset,pageSize,lastRows 三个参数,不同的数据库可以根于此三个参数属性应用不同的分页实现
    -->
    <select id="selectList" resultMap="userInfoResultMap">
    	SELECT <include refid="UserInfoColumns" />
	    FROM t_user_info 
		<include refid="listUserInfoWhere"/>
    </select>
	<!--该方法适用于，获取的数据条数小于等于1 如有特殊需要自己实现-->
	<select id="selectOne" resultMap="userInfoResultMap">
		SELECT <include refid="UserInfoColumns" />
		FROM t_user_info
		<include refid="listUserInfoWhere"/>
	</select>


</mapper>

